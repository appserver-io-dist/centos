#!/bin/bash

### BEGIN INIT INFO
# Provides:          appserver-watcher
# Required-Start:    $all
# Required-Stop:     $all
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: starts/stops appserver deployment scanner
# Description:       control script for the appserver deployment scanner using /etc/init.d/functions
### END INIT INFO

# Define constants holding our execution setup
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
BASE_PATH='/opt/appserver'
DAEMON="${BASE_PATH}/bin/php"
DAEMON_OPTS="-dappserver.php_sapi=appserver ${BASE_PATH}/server.php -w"
NAME="appserver-watcher"
DESC="Deployment Scanner"
PIDFILE="/var/run/${NAME}.pid"
LOCKFILE="/var/lock/subsys/${NAME}"

# Include the functions file as we need it for some integrated commands
. /etc/init.d/functions

###
# Start script is implemented manually as we had problems with the "daemon" command
###
start() {
    # Do nothing if there already is a pid or lock file
    if ([ -f "$PIDFILE" -o -f LOCKFILE ]) then
        echo -n "Process seems to run already...";
        echo_failure
        echo
        return 2
    fi
    # Do the actual starting
    echo -n "Starting $NAME..."
    cd "$BASE_PATH"
    PID=`$DAEMON $DAEMON_OPTS > /dev/null 2>&1 & echo $!`
    if [ -z $PID ]; then
        echo_failure
        echo
        return 1
    else
        echo $PID > "$PIDFILE"
        touch "$LOCKFILE"
        echo_success
        echo
        return 0
    fi
}

###
# Stop the script execution
###
stop() {
    echo -n "Stopping $NAME..."
    killproc $NAME
    RETVAL=$?
    echo
    [ $RETVAL -eq 0 ] && rm -f $PIDFILE && rm -f $LOCKFILE
    return $RETVAL
}

###
# Determine what to do
###
case "$1" in
    start)
        start
    ;;
    stop)
        stop
    ;;
    restart|force-reload)
        stop
        start
    ;;
    status)
        status "$NAME" && exit 0 || exit $?
    ;;
    *)
        N=/etc/init.d/$NAME
        echo "Usage: $N {start|stop|restart|force-reload|status}" >&2
        exit 1
    ;;
esac

exit 0
